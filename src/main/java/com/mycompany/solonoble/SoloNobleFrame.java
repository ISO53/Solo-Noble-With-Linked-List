
package com.mycompany.solonoble;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author ISO53
 */
public class SoloNobleFrame extends javax.swing.JFrame {

    int N;
    int piecesCount;
    int radius;
    int thicknessOfNodesFrame;
    int scaleVariable;

    byte data;
    String[] possibleMoves;
    boolean isFirstClickedPanelLoaded;
    Graphics2D arrowHeadGraphic;
    DoubleLinkedList<Byte> headerNodes;
    BufferedImage arrowHead; // 110 x 50

    Color lightGray;
    Color darkGray;
    Color nodeColor;

    JPanel jpnl_squarePanel;
    JPanel jpnl_gameArea;
    RoundPanel firstClickedRoundPanel;
    JPanel firstClickedSquarePanel;
    JPanel secondClickedSquarePanel;
    RoundPanel temporaryPanel;
    ScalePanel scalePanel;

    public SoloNobleFrame() {
        initComponents();

        this.setLocationRelativeTo(null);
        jdlg_scale.setLocationRelativeTo(null);
        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);

        N = 10;
        radius = 20;
        thicknessOfNodesFrame = 3;
        scaleVariable = 0;
        piecesCount = 0;

        data = 0B1;
        possibleMoves = new String[4];
        headerNodes = new DoubleLinkedList<>(data, "temp");
        headerNodes.removeTemp();
        isFirstClickedPanelLoaded = false;

        try {
            arrowHead = ImageIO.read(this.getClass().getClassLoader().getResource("arrowHead2.png"));
        } catch (IOException ex) {
            Logger.getLogger(SoloNobleFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        lightGray = new Color(100, 100, 100);
        darkGray = new Color(90, 90, 90);
        nodeColor = new Color(180, 60, 60);

        firstClickedRoundPanel = new RoundPanel();
        firstClickedSquarePanel = new JPanel();
        secondClickedSquarePanel = new JPanel();
        temporaryPanel = new RoundPanel();
        scalePanel = new ScalePanel();

        scalePanel.setBackground(new Color(90, 90, 90));

        jdlg_scale.setSize(472, 472);
        jdlg_scale.add(scalePanel);
        jdlg_scale.setBackground(new Color(90, 90, 90));
        jdlg_scale.setLocationRelativeTo(this);
        
        // Open the JDialog in the background otherwise paintGraphics works glitchy on scalePanel
        jdlg_scale.setVisible(true);
        jdlg_scale.setVisible(false);

        jdlg_scale.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                jdlg_scale.setVisible(false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdlg_scale = new javax.swing.JDialog();
        jpnl_background = new javax.swing.JPanel();
        jpnl_menuPanel = new javax.swing.JPanel();
        jlbl_nValueText = new javax.swing.JLabel();
        jsldr_nValueSlider = new javax.swing.JSlider();
        jbttn_startGame = new javax.swing.JButton();
        jlbl_lastScoreLabel = new javax.swing.JLabel();
        jlbl_totalNodesLabel = new javax.swing.JLabel();
        jpnl_gamePanel = new javax.swing.JPanel();

        jdlg_scale.setAlwaysOnTop(true);
        jdlg_scale.setUndecorated(true);
        jdlg_scale.setResizable(false);
        jdlg_scale.getContentPane().setLayout(new javax.swing.BoxLayout(jdlg_scale.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jpnl_menuPanel.setBackground(new java.awt.Color(102, 102, 102));

        jlbl_nValueText.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jlbl_nValueText.setForeground(new java.awt.Color(255, 255, 255));
        jlbl_nValueText.setText("The Board Will Be 10x10 Size!");

        jsldr_nValueSlider.setBackground(new java.awt.Color(102, 102, 102));
        jsldr_nValueSlider.setMaximum(16);
        jsldr_nValueSlider.setMinimum(6);
        jsldr_nValueSlider.setValue(10);
        jsldr_nValueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsldr_nValueSliderStateChanged(evt);
            }
        });

        jbttn_startGame.setBackground(new java.awt.Color(102, 102, 102));
        jbttn_startGame.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jbttn_startGame.setText("NEW GAME");
        jbttn_startGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbttn_startGameActionPerformed(evt);
            }
        });

        jlbl_lastScoreLabel.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jlbl_lastScoreLabel.setForeground(new java.awt.Color(255, 255, 255));
        jlbl_lastScoreLabel.setText("Your Last Score: 0");

        jlbl_totalNodesLabel.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jlbl_totalNodesLabel.setForeground(new java.awt.Color(255, 255, 255));
        jlbl_totalNodesLabel.setText("Total Nodes: 0");

        javax.swing.GroupLayout jpnl_menuPanelLayout = new javax.swing.GroupLayout(jpnl_menuPanel);
        jpnl_menuPanel.setLayout(jpnl_menuPanelLayout);
        jpnl_menuPanelLayout.setHorizontalGroup(
            jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbttn_startGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnl_menuPanelLayout.createSequentialGroup()
                        .addComponent(jsldr_nValueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_nValueText)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlbl_lastScoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jlbl_totalNodesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpnl_menuPanelLayout.setVerticalGroup(
            jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jsldr_nValueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlbl_nValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jlbl_lastScoreLabel)))
                .addGap(18, 18, 18)
                .addGroup(jpnl_menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbttn_startGame)
                    .addComponent(jlbl_totalNodesLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpnl_gamePanel.setBackground(new java.awt.Color(90, 90, 90));

        javax.swing.GroupLayout jpnl_gamePanelLayout = new javax.swing.GroupLayout(jpnl_gamePanel);
        jpnl_gamePanel.setLayout(jpnl_gamePanelLayout);
        jpnl_gamePanelLayout.setHorizontalGroup(
            jpnl_gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 755, Short.MAX_VALUE)
        );
        jpnl_gamePanelLayout.setVerticalGroup(
            jpnl_gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpnl_backgroundLayout = new javax.swing.GroupLayout(jpnl_background);
        jpnl_background.setLayout(jpnl_backgroundLayout);
        jpnl_backgroundLayout.setHorizontalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnl_menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpnl_gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpnl_backgroundLayout.setVerticalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                .addComponent(jpnl_menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpnl_gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jpnl_background);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jsldr_nValueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsldr_nValueSliderStateChanged
        // TODO add your handling code here:
        int n = (int) jsldr_nValueSlider.getValue();
        if (n % 2 != 0) {
            n++;
            jsldr_nValueSlider.setValue(n);
        }
        N = n;
        piecesCount = N * N - 4;
        jlbl_nValueText.setText("The Board Will Be " + N + "x" + N + " Size!");
    }//GEN-LAST:event_jsldr_nValueSliderStateChanged

    private void jbttn_startGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbttn_startGameActionPerformed
        // TODO add your handling code here:
        jpnl_gamePanel.removeAll();
        headerNodes.clear();

        jlbl_totalNodesLabel.setText("Total Nodes: " + piecesCount);
        jpnl_gamePanel.repaint();
        isFirstClickedPanelLoaded = false;

        StringPanel strpnl_stringPanel;
        jpnl_gameArea = new JPanel();
        jpnl_gamePanel.add(jpnl_gameArea);

        jpnl_gameArea.setLayout(new GridBagLayout());
        GridBagConstraints gBC = new GridBagConstraints();

        jpnl_gameArea.setSize((N + 1) * 25 + 200, (N + 1) * 25 + 200);
        jpnl_gameArea.setBackground(Color.darkGray);
        jpnl_gameArea.setVisible(true);

        RoundPanel rpnl_roundPanel;

        char xCoor;
        int yCoor;

        setDoubleLinkedList();
        removeMiddleFourFromLinkedList();
        headerNodes.print();
        piecesCount = headerNodes.getSize();

        xCoor = '@';                // x coordinate of the board (Before A on ASCII)
        for (int x = 0; x < N + 1; x++) {
            yCoor = 0;              // y coordinate of the board (Before 1)
            for (int y = 0; y < N + 1; y++) {

                gBC.fill = GridBagConstraints.BOTH;
                gBC.gridx = x;
                gBC.gridy = y;
                gBC.weightx = 1;
                gBC.weighty = 1;

                jpnl_squarePanel = new JPanel(new GridBagLayout());
                jpnl_squarePanel.setVisible(true);
                jpnl_squarePanel.setName(xCoor + "" + yCoor);
                jpnl_squarePanel.setLayout(new BoxLayout(jpnl_squarePanel, BoxLayout.X_AXIS));
                jpnl_squarePanel.setBorder(BorderFactory.createTitledBorder(""));
                jpnl_squarePanel.setBackground((x + y) % 2 == 0 ? darkGray : lightGray);
                jpnl_gameArea.add(jpnl_squarePanel, gBC);

                jpnl_squarePanel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent me) {       // Move the node to selected panel
                        secondClickedSquarePanel = (JPanel) me.getComponent();
                        if (isFirstClickedPanelLoaded && secondClickedSquarePanel.getComponentCount() == 0 && !secondClickedSquarePanel.getName().equals("@0")) {
                            if (isItPossible(me.getComponent().getName())) {

                                String currentCoor = firstClickedRoundPanel.getParent().getName();
                                String targetCoor = me.getComponent().getName();
                                String middleCoor = getMiddleCoordination(currentCoor, targetCoor);

                                if (getLetter(currentCoor) == getLetter(targetCoor)) {      // Vertical Move
                                    headerNodes.remove(currentCoor);
                                    headerNodes.insertAfter(data, targetCoor, middleCoor);
                                    headerNodes.remove(middleCoor);
                                } else {                                                    // Horizontal Move
                                    headerNodes.remove(currentCoor);
                                    headerNodes.addLast(data, targetCoor);
                                    headerNodes.remove(middleCoor);
                                }
                                getPanel(middleCoor).repaint();
                                removePiece(getPanel(middleCoor));

                                headerNodes.print();

                                firstClickedSquarePanel.remove(firstClickedRoundPanel);
                                secondClickedSquarePanel.add(firstClickedRoundPanel);
                                firstClickedRoundPanel.setColor(nodeColor);

                                isFirstClickedPanelLoaded = false;

                                firstClickedSquarePanel.repaint();
                                secondClickedSquarePanel.repaint();
                                repaintPossibleMovesSquares();

                                piecesCount--;
                                jlbl_totalNodesLabel.setText("Total Nodes: " + piecesCount);

                                if (!isTherePossibleMove()) {
                                    jlbl_lastScoreLabel.setText("Your Last Score: " + piecesCount);
                                    scaleVariable = piecesCount;
                                    jdlg_scale.setVisible(true);

                                    scaleVariable = (scaleVariable > 9 ? 9 : scaleVariable);
                                    double degree = (365 / 9) * (9 - scaleVariable) + (365 / 9) / 2;
                                    Point centerOfScalePanel = new Point(scalePanel.getWidth() / 2, scalePanel.getHeight() / 2);
                                    arrowHeadGraphic = (Graphics2D) scalePanel.getGraphics();
                                    arrowHeadGraphic.setColor(Color.BLACK);
                                    arrowHeadGraphic.rotate(Math.toRadians(degree), centerOfScalePanel.x, centerOfScalePanel.y);
                                    SwingUtilities.invokeLater(() -> {
                                        arrowHeadGraphic.drawImage(arrowHead, centerOfScalePanel.x, centerOfScalePanel.y - 12, scalePanel);
                                    });
                                }
                            }
                        }
                    }
                });

                if (x == 0 && y == 0) {                                     // Top left panel of the board. Must be empty.
                    //  Do nothing.
                } else if (x == 0) {                                        // Top panels on the board without first panel. Must be letters.
                    strpnl_stringPanel = new StringPanel(yCoor + "", Color.BLACK);
                    strpnl_stringPanel.setVisible(true);
                    jpnl_squarePanel.add(strpnl_stringPanel);
                } else if (y == 0) {                                        // Left panels on the board without first panel. Must be numbers.
                    strpnl_stringPanel = new StringPanel(xCoor + "", Color.BLACK);
                    strpnl_stringPanel.setVisible(true);
                    jpnl_squarePanel.add(strpnl_stringPanel);
                } else if ((x == N / 2 || x == N / 2 + 1) && (y == N / 2 || y == N / 2 + 1)) {
                    // Middle four square must be empty, do nothing
                } else {                                                    // Game area. Must be nodes.
                    rpnl_roundPanel = new RoundPanel(radius, thicknessOfNodesFrame, nodeColor);
                    rpnl_roundPanel.setVisible(true);
                    rpnl_roundPanel.setSize(50, 50);
                    jpnl_squarePanel.add(rpnl_roundPanel);
                    rpnl_roundPanel.setLocation((rpnl_roundPanel.getParent().getSize().width - rpnl_roundPanel.getSize().width) / 2,
                            (rpnl_roundPanel.getParent().getSize().height - rpnl_roundPanel.getSize().height) / 2);

                    rpnl_roundPanel.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent me) {
                            firstClickedRoundPanel.setColor(nodeColor);
                            firstClickedRoundPanel.repaint();

                            firstClickedRoundPanel = (RoundPanel) me.getComponent();
                            firstClickedSquarePanel = (JPanel) me.getComponent().getParent();
                            firstClickedRoundPanel.setColor(Color.RED);
                            firstClickedRoundPanel.repaint();

                            isFirstClickedPanelLoaded = true;

                            jpnl_gameArea.repaint();

                            setPossibleMoves(firstClickedSquarePanel.getName());
                            printPossibleMoves();
                            showPossibleMoves();
                        }

                        @Override
                        public void mouseEntered(MouseEvent me) {
                            temporaryPanel = (RoundPanel) me.getComponent();
                            temporaryPanel.makeBrighter();
                            temporaryPanel.repaint();
                        }

                        @Override
                        public void mouseExited(MouseEvent me) {
                            temporaryPanel = (RoundPanel) me.getComponent();
                            temporaryPanel.makeDarker();
                            temporaryPanel.repaint();
                        }
                    });
                }
                yCoor++;
            }
            xCoor++;
        }

        jpnl_gameArea.setLocation((jpnl_gameArea.getParent().getWidth() - jpnl_gameArea.getWidth()) / 2,
                (jpnl_gameArea.getParent().getHeight() - jpnl_gameArea.getHeight()) / 2);

        jpnl_gameArea.revalidate();
    }//GEN-LAST:event_jbttn_startGameActionPerformed

    
    public void setDoubleLinkedList() {
        char xCoor = 'A';
        int yCoor = 1;

        for (int i = 0; i < N; i++) {
            yCoor = 1;
            DoubleLinkedList<Byte> dLL = new DoubleLinkedList<>(data, xCoor + "" + yCoor);
            headerNodes.addLast(dLL);
            yCoor++;

            for (int j = 0; j < N - 1; j++) {
                dLL.addLast(data, xCoor + "" + yCoor);
                yCoor++;
            }
            xCoor++;
        }
    }

    public void removeMiddleFourFromLinkedList() {
        String coor1 = (char) ('A' + (N / 2) - 1) + "" + (1 + (N / 2) - 1);
        String coor2 = (char) ('A' + (N / 2)) + "" + (1 + (N / 2) - 1);
        String coor3 = (char) ('A' + (N / 2) - 1) + "" + (1 + (N / 2));
        String coor4 = (char) ('A' + (N / 2)) + "" + (1 + (N / 2));

        headerNodes.remove(coor1);
        headerNodes.remove(coor2);
        headerNodes.remove(coor3);
        headerNodes.remove(coor4);
    }

    public void setPossibleMoves(String coordination) {
        char letter = getLetter(coordination);
        int number = getNumber(coordination);

        int counter = 0;

        possibleMoves = new String[4];

        // Right and left moves
        for (int i = -1; i < 2; i += 2) {   // -1 and +1
            if (letter + 2 * i <= 'A' + N - 1 && letter + 2 * i > 'A' - 1) {    // Does the move's coordinate in the board 
                String targetCoor = (char) (letter + 2 * i) + "" + number;      // Coordination to play
                String betweenCoor = (char) (letter + 1 * i) + "" + number;     // Coordination between target and node
                if (!headerNodes.doesItHave(targetCoor)) {                      // Target coordinate must be empty
                    if (headerNodes.doesItHave(betweenCoor)) {                  // Between coordinate must have a node
                        possibleMoves[counter] = targetCoor;                    // Possible move
                        counter++;
                    }
                }
            }
        }

        // Up and down moves
        for (int i = -1; i < 2; i += 2) {   // -1 and +1
            if (number + 2 * i <= 1 + N - 1 && number + 2 * i > 0) {    // Does the move's coordinate in the board 
                String targetCoor = letter + "" + (number + 2 * i);     // Coordination to play
                String betweenCoor = letter + "" + (number + 1 * i);    // Coordination between target and node
                if (!headerNodes.doesItHave(targetCoor)) {              // Target coordinate must be empty
                    if (headerNodes.doesItHave(betweenCoor)) {          // Between coordinate must have a node
                        possibleMoves[counter] = targetCoor;            // Possible move
                        counter++;
                    }
                }
            }
        }
    }

    public void showPossibleMoves() {
        for (int i = 0; i < possibleMoves.length; i++) {
            if (possibleMoves[i] != null) {
                JPanel panel = getPanel(possibleMoves[i]);
                Graphics2D g2D = (Graphics2D) panel.getGraphics();
                g2D.setColor(new Color(255, 255, 255, 50));
                SwingUtilities.invokeLater(() -> {
                    g2D.fillOval(panel.getWidth() / 4 + 2, panel.getWidth() / 4 + 2, panel.getWidth() / 3, panel.getHeight() / 3);
                });
            }
        }
    }

    public void printPossibleMoves() {
        System.out.print("Possible Moves: {");
        for (int i = 0; i < possibleMoves.length; i++) {
            System.out.print(possibleMoves[i]);
            if (i != possibleMoves.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.print("}\n");
    }

    public boolean isTherePossibleMove() {
        Component[] components = jpnl_gameArea.getComponents();
        for (Component component : components) {
            JPanel panel = (JPanel) component;
            if (panel.getComponentCount() > 0 && !(panel.getComponent(0) instanceof StringPanel)) {
                String coordination = panel.getName();
                setPossibleMoves(coordination);

                for (String move : possibleMoves) {
                    if (move != null) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public boolean isItPossible(String coordination) {
        for (int i = 0; i < possibleMoves.length; i++) {
            if (possibleMoves[i] != null) {
                if (possibleMoves[i].equals(coordination)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Returns the middle of two coordinates only if the coordinates are on the 
     * same level as horizontal or vertical. Which means either two coordinates
     * starts with same letter or ends with same number. Example shown below:
     *  coor1 = C1
     *  coor2 = A1
     *  returns B1  or,
     * 
     *  coor1 = A1
     *  coor2 = A5
     *  returns A3
     * 
     * @param coor1
     * @param coor2
     * @return
     */
    public String getMiddleCoordination(String coor1, String coor2) {
        char coor1Letter = getLetter(coor1);
        char coor2Letter = getLetter(coor2);
        int coor1Number = getNumber(coor1);
        int coor2Number = getNumber(coor2);

        if (coor1Letter == coor2Letter) {
            return coor1Letter + "" + (coor1Number + coor2Number) / 2;
        } else {
            return (char) ((coor1Letter + coor2Letter) / 2) + "" + coor1Number;
        }
    }

    public void removePiece(JPanel panel) {
        panel.remove(panel.getComponent(0));
    }

    public char getLetter(String coordination) {      // Example: B3
        return coordination.charAt(0);
    }

    public int getNumber(String coordination) {         // Example: C12
        return Integer.parseInt(coordination.substring(1));
    }

    public JPanel getPanel(String searchCoordination) {
        Component[] components = jpnl_gameArea.getComponents();

        for (Component component : components) {
            if (component.getName().equals(searchCoordination)) {
                return (JPanel) component;
            }
        }
        return null;
    }

    public void repaintPossibleMovesSquares() {
        for (String move : possibleMoves) {
            if (move != null) {
                JPanel panel = getPanel(move);
                panel.repaint();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoloNobleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoloNobleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoloNobleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoloNobleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SoloNobleFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbttn_startGame;
    private javax.swing.JDialog jdlg_scale;
    private javax.swing.JLabel jlbl_lastScoreLabel;
    private javax.swing.JLabel jlbl_nValueText;
    private javax.swing.JLabel jlbl_totalNodesLabel;
    private javax.swing.JPanel jpnl_background;
    private javax.swing.JPanel jpnl_gamePanel;
    private javax.swing.JPanel jpnl_menuPanel;
    private javax.swing.JSlider jsldr_nValueSlider;
    // End of variables declaration//GEN-END:variables
}
